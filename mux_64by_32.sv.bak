module mux_64by_32 #(parameter WIDTH = 64, SUBWIDTH = 32) (regSelect, sel, out);
	input logic [SUBWIDTH-1:0][WIDTH-1:0] regSelect;
	logic [WIDTH-1:0][SUBWIDTH-1:0] regBind;
	input logic [4:0] sel;
	output logic [WIDTH-1:0] out;
	
	integer i, j;
	always_comb begin
		for(i=0; i<WIDTH; i++); begin
			for (j=0; j < SUBWIDTH; j++); begin
				regBind[i][j] = regSelect[j][i];
			end
		end
	end
	
	genvar k;
 
	generate
		for(k=0; k<WIDTH; k++) begin : eachMux
			mux32_1 muxx (.in(regBind[k]), .sel(sel[1:0]), .out(out[k]));
		end
	endgenerate
endmodule

module mux_64by_32_testbench();
	logic [31:0][63:0] regSelect;
	logic [4:0] sel;
	logic [63:0] out;

	mux_64by_32 dut (regSelect, sel, out);

 initial begin
	regSelect = 0;
	regSelect[16] = 1;
	sel = 5'b00000;
	#10;
	sel = 5'b01000;
	#10;
 end


endmodule
