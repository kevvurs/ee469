// Test of MOVK and MOVZ instructions.
// Requires:
// ADDI, B, MOVK, MOVZ instructions
// Expected results:
// X0 = 0xCAFE000000000000
// X1 = 0xCAFEDEADBEEFBADD
// X2 = 0x0

//ADDI: I-type, Reg[Rd] = Reg[Rn] + {'0, Imm12}
//OP         Imm12        Rn    Rd
//3322222222 221111111111 00000 00000
//1098765432 109876543210 98765 43210
//1001000100 Unsigned     0..31 0..31

//B: B-type, PC = PC + SignExtend({Imm26, 2'b00})
//OP     Imm26
//332222 22222211111111110000000000
//109876 54321098765432109876543210
//000101 2's Comp Imm26

//MOVK: IM-type, Reg[Rd][16*shamt+15:16*shamt] = Imm16
//OP        Shamt  Imm16            Rd
//332222222 22     2111111111100000 00000
//109876543 21     0987654321098765 43210
//111100101 0..3   Unsigned         0..31

//MOVZ: IM-type, Reg[Rd] = {{'0, Imm16} << (Shamt * 16)}
//OP        Shamt  Imm16            Rd
//332222222 22     2111111111100000 00000
//109876543 21     0987654321098765 43210
//110100101 0..3   Unsigned         0..31

            //MAIN:
1001000100_101010101010_11111_00000    // ADDI X0, X31, #0xAAA
1001000100_101110111011_11111_00001    // ADDI X1, X31, #0xBBB
1001000100_110011001100_11111_00010    // ADDI X2, X31, #0xCCC
110100101_00_1101111010101101_00000    // MOVZ X0, #0xDEAD, LSL 0
110100101_01_1011111011101111_00000    // MOVZ X0, #0xBEEF, LSL 16
110100101_10_1011101011011101_00000    // MOVZ X0, #0xBADD, LSL 32
110100101_11_1100101011111110_00000    // MOVZ X0, #0xCAFE, LSL 48
1001000100_000000000000_00000_00001    // ADDI X1, X0, #0
111100101_10_1101111010101101_00001    // MOVK X1, #0xDEAD, LSL 32
111100101_01_1011111011101111_00001    // MOVK X1, #0xBEEF, LSL 16
111100101_00_1011101011011101_00001    // MOVK X1, #0xBADD, LSL 0
1001000100_000000000000_00001_00010    // ADDI X2, X1, #0
110100101_11_1111101011011110_00010    // MOVZ X2, #0xFADE, LSL 48
110100101_10_0000101011011110_00010    // MOVZ X2, #0xADE, LSL 32
110100101_01_0000000011011110_00010    // MOVZ X2, #0xDE, LSL 16
110100101_00_0000000000001110_00010    // MOVZ X2, #0xE, LSL 0
110100101_00_0000000000000000_00010    // MOVZ X2, #0x0, LSL 0
            //END:
000101_00000000000000000000000000      // B to HALT (+0)
1001000100_000000000000_11111_11111    // ADDI X31, X31, #0    // NOOP